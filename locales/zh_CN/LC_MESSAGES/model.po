# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Anonymous Authors
# This file is distributed under the same license as the PuzzleClone
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PuzzleClone \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-18 11:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../source/model.rst:2
msgid "model package"
msgstr ""

#: ../source/model.rst:5
msgid "Submodules"
msgstr ""

#: ../source/model.rst:8
msgid "model.template module"
msgstr ""

#: model.template.BaseCondition:1 model.template.DefinedSymbol:1
#: model.template.DefinedVar:1 model.template.DerivedSymbol:1
#: model.template.DerivedSymbols:1 model.template.Optimize:1
#: model.template.PostGen:1 model.template.PuzzleTemplate:1
#: model.template.QueryBase:1 model.template.QuerySelectionTemplate:1 of
msgid "Bases: :py:class:`~pydantic.main.BaseModel`"
msgstr ""

#: model.template.BaseCondition:1 of
msgid "Base constraint definition for puzzle rules."
msgstr ""

#: ../../docstring model.template.BaseCondition.desc:1 of
msgid "Natural language description for puzzle text generation."
msgstr ""

#: ../../docstring model.template.BaseCondition.desc:3 of
msgid "Example: \"Sum of two numbers must be less than 10\""
msgstr ""

#: ../../docstring model.template.BaseCondition.formula:1 of
msgid "Constraint logic expression using Python syntax."
msgstr ""

#: ../../docstring model.template.BaseCondition.formula:3 of
msgid "Example: \"x + y < 10\""
msgstr ""

#: ../../docstring model.template.BaseCondition.model_config:1
#: model.template.DefinedSymbol.model_config:1
#: model.template.DefinedVar.model_config:1
#: model.template.DerivedSymbol.model_config:1
#: model.template.DerivedSymbols.model_config:1
#: model.template.ExtraCondition.model_config:1
#: model.template.Optimize.model_config:1 model.template.PostGen.model_config:1
#: model.template.PuzzleTemplate.model_config:1
#: model.template.Query.model_config:1 model.template.QueryBase.model_config:1
#: model.template.QuerySelectionBase.model_config:1
#: model.template.QuerySelectionTemplate.model_config:1
#: model.template.QuerySelectionWithMultipleTemplates.model_config:1
#: model.template.QuerySelectionWithSingleTemplate.model_config:1 of
msgid ""
"Configuration for the model, should be a dictionary conforming to "
"[`ConfigDict`][pydantic.config.ConfigDict]."
msgstr ""

#: model.template.DefinedSymbol:1 of
msgid "Base class for defining symbol templates used in puzzle generation."
msgstr ""

#: model.template.DefinedSymbol:3 of
msgid ""
"This class provides the fundamental structure for creating basic symbol "
"elements in puzzles."
msgstr ""

#: model.template.DefinedSymbol:5 of
msgid ""
"Note: The base data structure is a dictionary, where the keys are the "
"symbol names (or tuples when len(init) > 1) and the values are the Z3 "
"symbols."
msgstr ""

#: model.template.DefinedSymbol:7 of
msgid ""
"If only the list of Z3 symbols are needed, use `<dict_name>.to_list()` or"
" `list(<dict_name>)` method to convert the dictionary values to a list."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.attr:1 of
msgid "List of symbol attributes defining additional characteristics."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.attr:4
#: model.template.DefinedSymbol.desc:4 model.template.DefinedSymbol.init:4
#: model.template.DefinedSymbol.type:6
#: model.template.DefinedSymbol.validate_type_desc_based_on_attr:6
#: model.template.DerivedSymbol.amount:4 model.template.DerivedSymbol.domain:4
#: of
msgid "Examples"
msgstr ""

#: ../../docstring model.template.DefinedSymbol.attr:5 of
msgid "[\"color\", \"size\"] indicates the symbol has color and size attributes."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.attr:8
#: model.template.DefinedVar.formula:8 of
msgid "Notes"
msgstr ""

#: ../../docstring model.template.DefinedSymbol.attr:9 of
msgid ""
"When None (default), symbols can be accessed directly via dictionary keys"
" (event[key])."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.attr:10 of
msgid ""
"When specified, symbols must be accessed using get() method "
"(event[key].get('color'))."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.desc:1 of
msgid "Description template for the symbol."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.desc:5 of
msgid "Single string when no attributes: \"Basic proposition symbol\""
msgstr ""

#: ../../docstring model.template.DefinedSymbol.desc:6 of
msgid ""
"List matching attr length when attributes exist: [\"Color description\", "
"\"Size description\"]"
msgstr ""

#: ../../docstring model.template.DefinedSymbol.init:1 of
msgid "Initialization expressions for the symbol, serving as primary keys."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.init:5 of
msgid "When length is 1: The primary key is a string."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.init:7 of
msgid ""
"Example: init = [\"children\"] with children = [\"Alice\", \"Bob\"] will "
"generate two symbols with primary keys \"Alice\" and \"Bob\"."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.init:10 of
msgid "When length > 1: The primary key is a tuple."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.init:12 of
msgid ""
"Example: init = [\"children\", \"adults\"] with children = [\"Alice\", "
"\"Bob\"], adults = [\"Chris\"] will generate symbols with primary keys "
"(\"Alice\", \"Chris\") and (\"Bob\", \"Chris\")."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.type:1 of
msgid "Type definition rules for the symbol."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.type:3 of
msgid "Valid Values: 'int' (default), 'bool', 'float', and 'enum'."
msgstr ""

#: ../../docstring model.template.DefinedSymbol.type:7 of
msgid "Single type string when attr is None: \"Bool\""
msgstr ""

#: ../../docstring model.template.DefinedSymbol.type:8 of
msgid "Type list matching attr length when attr exists: [\"int\", \"bool\"]"
msgstr ""

#: model.template.DefinedSymbol.validate_type_desc_based_on_attr:1 of
msgid "Validates consistency between attributes, types and descriptions."
msgstr ""

#: model.template.DefinedSymbol.validate_type_desc_based_on_attr
#: model.template.DefinedVar.validate_exclusive_fields of
msgid "Raises"
msgstr ""

#: model.template.DefinedSymbol.validate_type_desc_based_on_attr:3 of
msgid ""
"- ``attr`` is ``None``, but ``type`` is a list.          - ``attr`` "
"exists, but ``type`` is not a list.          - The format of ``desc`` "
"does not match the presence of ``attr``."
msgstr ""

#: model.template.DefinedSymbol.validate_type_desc_based_on_attr:3 of
msgid ""
"``attr`` is ``None``, but ``type`` is a list.          - ``attr`` exists,"
" but ``type`` is not a list.          - The format of ``desc`` does not "
"match the presence of ``attr``."
msgstr ""

#: model.template.DefinedVar:1 of
msgid "Base class for defining variables in puzzles."
msgstr ""

#: model.template.DefinedVar:3 of
msgid "This class supports two mutually exclusive ways of defining variables:"
msgstr ""

#: model.template.DefinedVar:5 of
msgid "By specifying `type` and `domain`."
msgstr ""

#: model.template.DefinedVar:7 of
msgid "By providing a custom formula in `formula`."
msgstr ""

#: ../../docstring model.template.DefinedVar.domain:1 of
msgid "The domain of the variable."
msgstr ""

#: ../../docstring model.template.DefinedVar.domain:4
#: model.template.DefinedVar.formula:4 model.template.DefinedVar.type:4
#: model.template.DefinedVar.validate_exclusive_fields:6
#: model.template.DerivedSymbol:14 model.template.DerivedSymbol.dim:4
#: model.template.DerivedSymbol.dim_cond:4
#: model.template.ExtraCondition.domain:4 of
msgid "Example"
msgstr ""

#: ../../docstring model.template.DefinedVar.domain:5 of
msgid "`\"[1, 10]\"`: Represents integers from 1 to 10."
msgstr ""

#: ../../docstring model.template.DefinedVar.domain:6 of
msgid "`\"[True, False]\"`: Represents boolean values."
msgstr ""

#: ../../docstring model.template.DefinedVar.domain:7 of
msgid ""
"`\"['red', 'blue', 'green']\"`: Represents a selection from the given "
"options."
msgstr ""

#: ../../docstring model.template.DefinedVar.formula:1 of
msgid "The formula used to initialize the variable."
msgstr ""

#: ../../docstring model.template.DefinedVar.formula:5 of
msgid "`\"randint(1,6) + randint(1,6)\"`: Represents the sum of two dice rolls."
msgstr ""

#: ../../docstring model.template.DefinedVar.formula:9 of
msgid ""
"Custom operators defined in the `custom_operator` field of the puzzle "
"template can be used in the formula."
msgstr ""

#: ../../docstring model.template.DefinedVar.formula:10 of
msgid "If `formula` is defined, `type` and `domain` must not be defined."
msgstr ""

#: ../../docstring model.template.DefinedVar.type:1 of
msgid "The type of the variable."
msgstr ""

#: ../../docstring model.template.DefinedVar.type:5 of
msgid "`\"int\"`: Represents an integer variable."
msgstr ""

#: ../../docstring model.template.DefinedVar.type:6 of
msgid "`\"bool\"`: Represents a boolean variable."
msgstr ""

#: model.template.DefinedVar.validate_exclusive_fields:1 of
msgid "Validates the mutually exclusive constraints between fields."
msgstr ""

#: model.template.DefinedVar.validate_exclusive_fields:3 of
msgid ""
"- If both `formula` and `type`/`domain` are defined.          - If "
"`formula` is not defined, but `type` or `domain` is missing."
msgstr ""

#: model.template.DefinedVar.validate_exclusive_fields:3 of
msgid ""
"If both `formula` and `type`/`domain` are defined.          - If "
"`formula` is not defined, but `type` or `domain` is missing."
msgstr ""

#: model.template.DerivedSymbol:1 of
msgid "Class defining rules for generating derived symbols from existing ones."
msgstr ""

#: model.template.DerivedSymbol:3 of
msgid ""
"The derivation works by first randomly selecting a number of values from "
"the `init` list and creating new symbols with the selected values."
msgstr ""

#: model.template.DerivedSymbol:5 of
msgid "Selection Process (before optimization):"
msgstr ""

#: model.template.DerivedSymbol:7 of
msgid "For each domain (total count specified by ``domain``):"
msgstr ""

#: model.template.DerivedSymbol:8 of
msgid "For each dimension (count specified by ``dim``):"
msgstr ""

#: model.template.DerivedSymbol:9 of
msgid "For each data source in ``init``:"
msgstr ""

#: model.template.DerivedSymbol:10 of
msgid ""
"Select ``amount[k]`` items from ``init[k]`` following ``order`` and "
"``init_cond`` rules"
msgstr ""

#: model.template.DerivedSymbol:11 of
msgid ""
"Verify dimension-level conditions (``dim_cond`` and custom conditions "
"with scope='dim')"
msgstr ""

#: model.template.DerivedSymbol:12 of
msgid ""
"Verify domain-level conditions (``domain_cond`` and custom conditions "
"with scope='domain')"
msgstr ""

#: model.template.DerivedSymbol:30 of
msgid "This configuration will:"
msgstr ""

#: model.template.DerivedSymbol:32 of
msgid "Generate 3 symbols (``domain = 3``)"
msgstr ""

#: model.template.DerivedSymbol:34 of
msgid "Each symbol has 1 dimension (default ``dim = 1``)"
msgstr ""

#: model.template.DerivedSymbol:36 of
msgid "Each dimension uses 2 data sources (``len(init) = 2``)"
msgstr ""

#: model.template.DerivedSymbol:38 of
msgid "The first source provides integers from 0 to ``p_num - 1``"
msgstr ""

#: model.template.DerivedSymbol:40 of
msgid "The second source provides integers from 2 to 10"
msgstr ""

#: model.template.DerivedSymbol:42 of
msgid "Selects 1 item from each source (default when ``amount`` is None)"
msgstr ""

#: model.template.DerivedSymbol:44 of
msgid "Applies custom domain-level constraint on the selected values"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.amount:1 of
msgid "Number of items selected from each data source."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.amount:5 of
msgid "[\"2\", \"1\"]: Select 2 items from first source, 1 from second"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.amount:7 of
msgid "None: Select exactly 1 item from each source (default)"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.amount:11
#: model.template.DerivedSymbol.init_cond:12
#: model.template.DerivedSymbol.order:12 of
msgid "Length must match ``init``"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.amount:13 of
msgid "Each value must be a string (literal or variable name)"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.custom_cond:1 of
msgid "Custom constraint dictionaries containing:"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.custom_cond:3 of
msgid "scope: Application level ('domain'/'dim')"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.custom_cond:5 of
msgid "fields: List of field indices from init"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.custom_cond:7 of
msgid ""
"constraint: Constraint logic expression. Must be a valid Python lambda "
"function string."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.custom_cond:8 of
msgid ""
"When scope=\"domain\", the input is a 4-dimensional list, where the "
"selected values can be fetched by `l[domain_index][dim_index][init_index "
"(in 'fields')][amount_index]`."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.custom_cond:9 of
msgid ""
"When scope=\"dim\", the input is a 3-dimensional list, where the selected"
" values can be fetched by `l[dim_index][init_index (in "
"'fields')][amount_index]`."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.desc:1 of
msgid "Symbol collection description text for puzzle generation."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.dim:1 of
msgid "Number of dimensions for the derived symbol."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.dim:5 of
msgid ""
"2 generates two-dimensional symbol matrix (useful for statements with "
"multiple clauses)."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.dim_cond:1 of
msgid "Inter-dimensional constraints (list of conditions)."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.dim_cond:5 of
msgid ""
"[[0, 1], [2]] means values from `init[0]` and `init[1]` cannot be "
"identical at the same time AND values from `init[2]` cannot be identical."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.dim_cond:7 of
msgid "Cannot contain duplicate indices."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.dim_cond:9
#: model.template.DerivedSymbol.domain_cond:9
#: model.template.DerivedSymbol.init_cond:9
#: model.template.DerivedSymbol.order:9 of
msgid "Default:"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.dim_cond:10 of
msgid ""
"[[0, 1, ..., `len(init)`]] (i.e., all selections must be different in at "
"least one source)."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.domain:1 of
msgid "Total number of selections."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.domain:5 of
msgid "\"5\": Make 5 selections from the data sources"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.domain:6 of
msgid "\"n\": Use variable `n` to determine count"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.domain:8 of
msgid "Must be a string representing a literal or variable name"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.domain_cond:1 of
msgid "Global repetition rule for symbol selection:"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.domain_cond:3 of
msgid "Controls whether identical symbol combinations are allowed:"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.domain_cond:5 of
msgid "True: Disallow identical combinations"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.domain_cond:7 of
msgid "False: Allow duplicates"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.domain_cond:10 of
msgid "True (no identical combinations)"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.formula:1 of
msgid "Symbol generation formula using Python syntax."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.init:1 of
msgid "Data sources for the selection."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.init:3 of
msgid "Each element must be a string representing either:"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.init:5 of
msgid "A stringified list of literals (e.g., '[True, False]')"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.init:7 of
msgid "A variable name containing the data"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.init_cond:1 of
msgid "Selection repetition rules per data source during selection."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.init_cond:3 of
msgid "Controls whether duplicates are allowed:"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.init_cond:5 of
msgid "True: Allow duplicate selections"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.init_cond:7 of
msgid "False: Disallow duplicates"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.init_cond:10 of
msgid "All False (no duplicates allowed)"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.order:1 of
msgid "Permutation configuration per data source during selection."
msgstr ""

#: ../../docstring model.template.DerivedSymbol.order:3 of
msgid "Controls whether selection order matters:"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.order:5 of
msgid "True: Permutation (order matters)"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.order:7 of
msgid "False: Combination (order doesn't matter)"
msgstr ""

#: ../../docstring model.template.DerivedSymbol.order:10 of
msgid "All True (order matters for all sources)"
msgstr ""

#: model.template.DerivedSymbols:1 of
msgid "Container for multiple derived symbol templates with random counts."
msgstr ""

#: ../../docstring model.template.DerivedSymbols.templates:1 of
msgid "List of symbol templates for generation."
msgstr ""

#: ../../docstring model.template.DerivedSymbols.total:1 of
msgid "Total number of symbols to generate."
msgstr ""

#: model.template.ExtraCondition:1 of
msgid "Bases: :py:class:`~model.template.BaseCondition`"
msgstr ""

#: model.template.ExtraCondition:1 of
msgid "Extended constraints with multi-dimensional parameters."
msgstr ""

#: ../../docstring model.template.ExtraCondition.amount:1 of
msgid "Number of selections per data source. (same format as DerivedSymbol)"
msgstr ""

#: ../../docstring model.template.ExtraCondition.custom_cond:1 of
msgid "Custom constraints (same format as DerivedSymbol)."
msgstr ""

#: ../../docstring model.template.ExtraCondition.domain:1 of
msgid ""
"Total condition count. Must be a range string \"[min, max]\". If None, "
"one condition will be generated."
msgstr ""

#: ../../docstring model.template.ExtraCondition.domain:5 of
msgid "\"[1, 5]\": Generate between 1 and 5 conditions."
msgstr ""

#: ../../docstring model.template.ExtraCondition.domain_cond:1 of
msgid "Global repetition rule."
msgstr ""

#: ../../docstring model.template.ExtraCondition.init:1 of
msgid "Data sources (same format as DerivedSymbol)."
msgstr ""

#: ../../docstring model.template.ExtraCondition.init_cond:1 of
msgid "Repetition rule configuration (default all False)."
msgstr ""

#: ../../docstring model.template.ExtraCondition.order:1 of
msgid "Permutation configuration (default all True)."
msgstr ""

#: model.template.Optimize:1 of
msgid "Optimization target definition (for optimization problems only)."
msgstr ""

#: ../../docstring model.template.Optimize.formula:1 of
msgid "Formula to optimize."
msgstr ""

#: ../../docstring model.template.Optimize.type:1 of
msgid "Optimization type (\"minimize\" or \"maximize\")."
msgstr ""

#: model.template.PostGen:1 of
msgid ""
"Initialization after computing the problem solution for the first time. "
"(Applicable for scenarios where parameters in the actual problem need to "
"be computed using z3)"
msgstr ""

#: ../../docstring model.template.PostGen.post_gen_conditions:1 of
msgid "New constraints to add after initial solution."
msgstr ""

#: ../../docstring model.template.PostGen.post_gen_conditions:3 of
msgid "Key: The new constraint name."
msgstr ""

#: ../../docstring model.template.PostGen.post_gen_conditions:5 of
msgid "Value: A string of the formula for the constraint."
msgstr ""

#: ../../docstring model.template.PostGen.post_gen_vars:1 of
msgid ""
"Extracting the values of symbols from _sol (the selected solution) as new"
" variables."
msgstr ""

#: ../../docstring model.template.PostGen.post_gen_vars:3 of
msgid "Key: The new variable name."
msgstr ""

#: ../../docstring model.template.PostGen.post_gen_vars:5 of
msgid ""
"Value: The expression to compute the variable value, which can be a "
"string of a Python expression."
msgstr ""

#: model.template.PuzzleTemplate:1 of
msgid "Main puzzle template structure integrating all components."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.static_conditions:1 of
msgid "Dictionary of base constraints."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.calc_solution:1 of
msgid "Whether to compute solutions (default True)."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.custom_operator:1 of
msgid "Dictionary of custom operators."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.custom_operator:3 of
msgid "Key: Operator name."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.custom_operator:5 of
msgid ""
"Value: Python expression string defining the operator OR the path to a "
"Python file containing the operator definition."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.custom_operator:7 of
#, python-brace-format
msgid ""
"Example: {\"double\": \"lambda x: x * 2\", \"reformat\": "
"\"customs/mathexpr_generator.py\"}"
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.defined_symbols:1 of
msgid "Dictionary of base symbol definitions."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.defined_vars:1 of
msgid "definition)."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.defined_vars
#: model.template.PuzzleTemplate.derived_vars of
msgid "type"
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.defined_vars:3 of
msgid "Dictionary of base variable definitions (name"
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.derived_symbols:1 of
msgid "Dictionary of derived symbol rules (direct or nested templates)."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.derived_vars:1 of
msgid "formula)."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.derived_vars:3 of
msgid "Dictionary of derived variable calculation rules (name"
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.desc:1 of
msgid "Overall template description for puzzle introduction."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.dynamic_conditions:1 of
msgid "Dictionary of extended constraints."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.max_solution:1 of
msgid "Maximum number of solutions to generate."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.max_solution:5 of
msgid ""
"Here, \"solution\" refers to a valid configuration of all symbols that "
"satisfies all constraints. It does NOT mean the number of valid answers "
"to the final question."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.max_solution:6 of
msgid ""
"If the number of solutions exceeds this limit, the solver will stop and "
"raise an exception."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.optimize:1 of
msgid "Optimization target (for optimization problems only)."
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.post_generation:1 of
msgid "Post-generation configuration including:"
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.post_generation:3 of
msgid "post_gen_vars: New variables from solutions"
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.post_generation:4 of
msgid "post_gen_conditions: Additional constraints"
msgstr ""

#: ../../docstring model.template.PuzzleTemplate.query:1 of
msgid "Dictionary of question definitions."
msgstr ""

#: model.template.Query:1 model.template.QuerySelectionBase:1 of
msgid "Bases: :py:class:`~model.template.QueryBase`"
msgstr ""

#: model.template.Query:1 of
msgid "Open-ended question definition."
msgstr ""

#: ../../docstring model.template.Query.ans_assertion:1 of
msgid "Assertion for answer validation."
msgstr ""

#: ../../docstring model.template.Query.ans_formula:1 of
msgid "Answer generation formula."
msgstr ""

#: ../../docstring model.template.Query.ans_text:1 of
msgid "Answer text format."
msgstr ""

#: model.template.QueryBase:1 of
msgid "Base class for question definitions."
msgstr ""

#: ../../docstring model.template.QueryBase.desc:1 of
msgid "Question description text (may contain placeholders)."
msgstr ""

#: ../../docstring model.template.QueryBase.desc:3 of
msgid "Example: \"Which option satisfies the condition?\""
msgstr ""

#: model.template.QuerySelectionBase:1 of
msgid "Multiple-choice question definition."
msgstr ""

#: ../../docstring model.template.QuerySelectionBase.opt_num:1 of
msgid "Total number of options to present (default 4)."
msgstr ""

#: ../../docstring model.template.QuerySelectionBase.query_type:1 of
msgid "Question type:"
msgstr ""

#: ../../docstring model.template.QuerySelectionBase.query_type:3 of
msgid "'single_choice': Single correct answer"
msgstr ""

#: ../../docstring model.template.QuerySelectionBase.query_type:4 of
msgid "'multiple_choice': Multiple correct answers"
msgstr ""

#: ../../docstring model.template.QuerySelectionBase.select_type:1 of
msgid "Whether to select the correct or incorrect option(s):"
msgstr ""

#: ../../docstring model.template.QuerySelectionBase.select_type:3 of
msgid "True: Select the correct option(s)"
msgstr ""

#: ../../docstring model.template.QuerySelectionBase.select_type:4 of
msgid "False: Select the incorrect option(s)"
msgstr ""

#: model.template.QuerySelectionTemplate:1 of
msgid "Template for multiple-choice options."
msgstr ""

#: model.template.QuerySelectionTemplate:3 of
msgid ""
"The option generation process works by randomly selecting a number of "
"values from the `init` list to create options."
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.amount:1 of
msgid "Number of selections per source. (Same format as DerivedSymbol.amount)"
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.cond:1 of
msgid "Constraint scope:"
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.cond:3 of
msgid "'any': At least one solution satisfies"
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.cond:5 of
msgid "'all': All solutions satisfy"
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.custom_cond:1 of
msgid "Custom constraints (same format as DerivedSymbol.custom_cond)."
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.init:1 of
msgid "Data source. (Same format as DerivedSymbol.init)"
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.init_cond:1 of
msgid "Repetition rule configuration. (default all False)"
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.opt_formula:1 of
msgid "Option correctness evaluation expression."
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.opt_formula:3 of
msgid "Example: \"x % 2 == 0\""
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.opt_text:1 of
msgid "Option display template (may contain placeholders)."
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.opt_text:3 of
#, python-brace-format
msgid "Example: \"{_opt[0][0]}\""
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.opt_text:5 of
msgid "Automatically prefixed with ABCD, no need to include in string."
msgstr ""

#: ../../docstring model.template.QuerySelectionTemplate.order:1 of
msgid "Permutation configuration (default first dimension False, others True)."
msgstr ""

#: model.template.QuerySelectionWithMultipleTemplates:1 of
msgid "Bases: :py:class:`~model.template.QuerySelectionBase`"
msgstr ""

#: model.template.QuerySelectionWithMultipleTemplates:1 of
msgid "Multiple templates for multiple-choice questions."
msgstr ""

#: ../../docstring
#: model.template.QuerySelectionWithMultipleTemplates.templates:1 of
msgid "List of option templates."
msgstr ""

#: model.template.QuerySelectionWithSingleTemplate:1 of
msgid ""
"Bases: :py:class:`~model.template.QuerySelectionBase`, "
":py:class:`~model.template.QuerySelectionTemplate`"
msgstr ""

#: model.template.QuerySelectionWithSingleTemplate:1 of
msgid "Single template for multiple-choice questions."
msgstr ""

#: ../source/model.rst:16
msgid "Module contents"
msgstr ""

