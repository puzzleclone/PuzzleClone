custom_operator:
  get_days: 'lambda x: 31 if x in [1, 3, 5, 7, 8, 10, 12] else 30 if x != 2 else 28'
  calc_salary: 'lambda start_day, days, month_start_weekday, half_salary, salary:
    sum([0 if (month_start_weekday + start_day - 1 + i) % 7 == 0 else half_salary
    if (month_start_weekday + start_day - 1 + i) % 7 == 6 else salary for i in range(days
    % 7)]) + (5 * salary + half_salary) * (days // 7)'
  calculate_target_date: 'lambda m, d, days: (__import__(''datetime'').datetime(2021,
    m, d) + __import__(''datetime'').timedelta(days=days)).strftime(''%m/%d'')'
variables:
  half_salary:
    type: int
    domain: "[3, 8]"
    diff_factor: 0
  days:
    type: int
    domain: "[24, 94]"
    diff_factor: 1
  start_month:
    type: int
    domain: "[1, 12]"
    diff_factor: 0
  start_weekday:
    type: int
    domain: "[0, 6]"
    diff_factor: 0
  salary:
    formula: 2 * half_salary
  start_day:
    formula: randint(21, get_days(start_month))
  month_start_weekday:
    formula: (start_weekday - start_day + 1) % 7
  total_salary:
    formula: calc_salary(start_day, days, month_start_weekday, half_salary, salary)
  weekdays:
    formula: "['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']"
symbols:
  start_day_sym:
    source:
    - "['x']"
    type: int
conditions:
  domain:
    formula: And(start_day_sym['x'] >= 21, start_day_sym['x'] <= get_days(start_month))
  cond:
    formula: Or([start_day_sym['x'] == x for x in [y for y in range(21, get_days(start_month))
      if calc_salary(y, days, month_start_weekday, half_salary, salary) == total_salary]
      ])
max_solution: 1
queries:
  q1:
    desc: 若所有年份均为平年，则这个人打工结束的那一天是哪一天（按MM/DD格式输出）？
    ans_formula: get_value(_solutions[0], start_day_sym['x'])
    ans_text: calculate_target_date(start_month, _ans, days - 1)
    ans_assertion: len(_solutions) == 1
desc: 有一个小伙子在一家工地上连续打工{days}天，共赚得{total_salary}元（日工资{salary}元，星期六半天工资{half_salary}元，星期日休息无工资），他记不清自己是从{start_month}月下旬的哪天开始打工的，不过他知道这个月的1号是{weekdays[month_start_weekday]}，{q1}
