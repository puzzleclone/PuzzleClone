variables:
  truck_type_num:
    type: int
    domain: "[2, 3]"
    diff_factor: 1
  truck_num:
    formula: generate_random_list(truck_type_num, 'int', [6, 12])
    diff_factor: 1
  truck_volume:
    formula: generate_random_list(truck_type_num, 'int', [6, 12])
    diff_factor: 0
  driver_num:
    type: int
    domain: "[sum(truck_num) // 2, sum(truck_num)]"
    diff_factor: 0
  worker_per_truck:
    formula: sorted(generate_random_list(truck_type_num, 'int', [1, 5]))
    diff_factor: 0
  profit_per_truck:
    formula: "[v * 10 for v in sorted(generate_random_list(truck_type_num, 'int',\
      \ [25, 55]))]"
    diff_factor: 0
  worker_num:
    type: int
    domain: "[min([worker_per_truck[i] * truck_num[i] for i in range(truck_type_num)]),\
      \ max([worker_per_truck[i] * truck_num[i] for i in range(truck_type_num)]) -\
      \ 1]"
    diff_factor: 0
  total_weight:
    type: int
    domain: "[sum([truck_volume[i] * truck_num[i] for i in range(truck_type_num)])\
      \ // 2, sum([truck_volume[i] * truck_num[i] for i in range(truck_type_num)])]"
    diff_factor: 1
  truck_types:
    formula: "[chr(65 + i) for i in range(truck_type_num)]"
  truck_types_desc:
    formula: "','.join(truck_types)"
symbols:
  num:
    source:
    - truck_types
    type: int
conditions:
  num_domain:
    formula: And([And(num[truck_types[i]] >= 0, num[truck_types[i]] <= truck_num[i])
      for i in range(truck_type_num)])
  total_weight_cond:
    formula: Sum([num[truck_types[i]] * truck_volume[i] for i in range(truck_type_num)])
      >= total_weight
  driver_cond:
    formula: Sum([num[truck_types[i]] for i in range(truck_type_num)]) <= driver_num
  worker_cond:
    formula: Sum([num[truck_types[i]] * worker_per_truck[i]  for i in range(truck_type_num)])
      <= worker_num
optimize:
  type: maximize
  formula: Sum([num[truck_types[i]] * profit_per_truck[i]  for i in range(truck_type_num)])
queries:
  q1:
    desc: 该公司如何合理计划当天派用{truck_type_num}类卡车的车辆数才能使利润最大？用逗号分隔输出{truck_types_desc}型卡车的车辆数及最大利润。
    ans_formula: "[get_value(_solutions, num[p]) for p in truck_types] + [sum([profit_per_truck[i]\
      \ * get_value(_solutions, num[truck_types[i]]) for i in range(truck_type_num)])]"
    ans_text: "','.join([str(v) for v in _ans])"
    ans_assertion: 'True'
desc: 某运输公司有{driver_num}名驾驶员和{worker_num}名工人,有{','.join([str(truck_num[i]) + '辆载重量为'
  + str(truck_volume[i]) + '吨的' + truck_types[i] + '型卡车' for i in range(truck_type_num)])}.某天需运往目的地至少{total_weight}吨的货物,派用的每辆车需满载且只运送一次,{','.join(['派出的每辆'
  + truck_types[i] + '型卡车需配' + str(worker_per_truck[i]) + '名工人,运送一次可得利润' + str(profit_per_truck[i])
  + '元' for i in range(truck_type_num)])},{q1}
