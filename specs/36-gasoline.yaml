variables:
  p_num:
    type: int
    domain: "[5, 10]"
    diff_factor: 1
  profit_per_100km:
    type: int
    domain: "[2, 8]"
    diff_factor: 0
  prices:
    formula: 'generate_random_list(p_num, ''float'', [6, 8], [f"lambda l: len(l) ==
      len(to_unique(l))"])'
    diff_factor: 1
  total_distance_div_100:
    type: int
    domain: "[3, 10]"
    diff_factor: 1
  total_distance:
    formula: total_distance_div_100 * 100
    diff_factor: 1
  station_distance_div_10:
    formula: 'sorted(generate_random_list(p_num - 1, ''int'', [1, total_distance_div_100
      * 10], [f"lambda l: len(l) == len(to_unique(l))"]))'
    diff_factor: 0
  station_distance:
    formula: "[0] + [i * 10 for i in station_distance_div_10]"
    diff_factor: 0
  cost_per_100km:
    type: int
    domain: "[10, 10]"
    diff_factor: 1
  max_gasoline_div_10:
    type: int
    domain: "[2, total_distance_div_100 - 1]"
    diff_factor: 1
  max_gasoline:
    formula: max_gasoline_div_10 * 10
    diff_factor: 1
  stations_id:
    formula: generate_letters(p_num)
  prices_desc:
    formula: "','.join([('起始点' if i == 0 else '第' + str(station_distance[i]) + '公里')\
      \ + '加油站的油价每升' + str(prices[i]) + '元' for i in range(p_num) ])"
symbols:
  events:
    source:
    - stations_id
    type:
    - float
    - float
    attr:
    - g_added
    - g_left
conditions:
  g_added_domain:
    formula: And([x >= 0 for x in events.get('g_added')])
  g_left_domain:
    formula: And([And(x >= 0, x <= max_gasoline) for x in events.get('g_left')])
  initial:
    formula: events[stations_id[0]].get('g_added') == events[stations_id[0]].get('g_left')
  station_cond:
    formula: And([And(events[stations_id[i]].get('g_left') == events[stations_id[i
      - 1]].get('g_left') - (station_distance[i] - station_distance[i - 1]) * 0.1
      + events[stations_id[i]].get('g_added'), events[stations_id[i - 1]].get('g_left')
      - (station_distance[i] - station_distance[i - 1]) * 0.1 >= 0 ) for i in range(1,
      p_num)])
  finalize:
    formula: events[stations_id[p_num - 1]].get('g_left') - (total_distance - station_distance[p_num
      - 1]) * 0.1 >= 0
optimize:
  type: minimize
  formula: profit_per_100km * Sum([prices[i] * events[stations_id[i]].get('g_added')
    for i in range(p_num)])
queries:
  q1:
    desc: 请问他送货最多能获得多少利润？最终答案请保留两位小数。
    ans_formula: profit_per_100km * total_distance - sum([prices[i] * get_value(_solutions,
      events[stations_id[i]].get('g_added')) for i in range(p_num)])
    ans_text: "'{:.2f}'.format(_ans)"
    ans_assertion: 'True'
desc: 王师傅是一名送货员，他每次送货都能得到一定的报酬。这次他需要运送一批货物，总路程为{total_distance}公里。他的车每百公里耗油量为{cost_per_100km}升，油箱容量为{max_gasoline}升。这段路从起始点到终点共设有{p_num}个加油站，它们的油价各不相同。{prices_desc}。王师傅每次送货能得到每公里{profit_per_100km}元的报酬。{q1}
