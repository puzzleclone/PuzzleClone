custom_operator:
  generate_sudoku: customs/sudoku.py
  generate_sudoku_positions: customs/sudoku.py
variables:
  filled_num:
    type: int
    domain: "[49, 56]"
    diff_factor: -1
  sudoku:
    formula: generate_sudoku()
  filled_pos:
    formula: generate_sudoku_positions(filled_num)
  filled_id:
    formula: "['x' + str(i) for i in range(81)]"
  sudoku_desc:
    formula: "', '.join([str(sudoku[i//9][i%9]) if (i//9, i%9) in filled_pos else\
      \ '?' for i in range(81)])"
symbols:
  vars:
    source:
    - filled_id
    type: int
conditions:
  domain:
    formula: And([And(x >= 1, x <= 9) for x in vars])
  known:
    formula: And([vars[filled_id[i[0]*9+i[1]]] == sudoku[i[0]][i[1]] for i in filled_pos])
  cond_row:
    formula: And([Distinct([vars[filled_id[i*9+j]] for j in range(9)]) for i in range(9)])
  cond_col:
    formula: And([Distinct([vars[filled_id[j*9+i]] for j in range(9)]) for i in range(9)])
  cond_square:
    formula: And([Distinct([vars[filled_id[(3*i+k)*9+(3*j+l)]] for k in range(3) for
      l in range(3) ]) for i in range(3) for j in range(3)])
max_solution: 1
queries:
  q1:
    desc: 解一个9*9的数独，要求每行、每列、以及每个3*3的小九宫格都不能有重复数字，这个数独从上到下、从左到右依次为{sudoku_desc}；输出整个矩阵，答案按照从上到下、从左到右的顺序用逗号分隔输出。
    ans_formula: to_unique([[get_value(_model, vars[filled_id[i]]) for i in range(81)]
      for _model in _solutions])
    ans_text: "','.join([str(v) for v in _ans[0]])"
    ans_assertion: len(_ans) == 1 and all([isinstance(v, int) for v in _ans[0]])
desc: "{q1}"
