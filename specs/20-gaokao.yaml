variables:
  student_num:
    type: int
    domain: "[5, 10]"
    diff_factor: 1
  male_num:
    type: int
    domain: "[1, student_num - 1]"
    diff_factor: 0
  old_num:
    type: int
    domain: "[1, student_num - 1]"
    diff_factor: 0
  query_gender:
    type: int
    domain: "[0, 1]"
    diff_factor: 0
  query_age:
    type: int
    domain: "[0, 1]"
    diff_factor: 0
  students:
    formula: generate_letters(student_num)
symbols:
  stu_s:
    source:
    - students
    attr:
    - gender
    - age
    type:
    - bool
    - bool
conditions:
  gender_domain:
    formula: Sum([If(stu_s[p].get('gender'), 1, 0) for p in students]) == male_num
  age_domain:
    formula: Sum([If(stu_s[p].get('age'), 1, 0) for p in students]) == old_num
  gender_cond:
    source:
    - students
    - "['eq', 'neq']"
    amount:
    - '2'
    - '1'
    domain: "[student_num // 2, student_num]"
    formula: 'make_expr(_sym[1][0], stu_s[_sym[0][0]].get(''gender''), stu_s[_sym[0][1]].get(''gender'')) '
    desc: "{_sym[0][0]}和{_sym[0][1]}性别{'相同' if _sym[1][0] == 'eq' else '不同'}；"
  age_cond:
    source:
    - students
    - "['eq', 'neq']"
    amount:
    - '2'
    - '1'
    domain: "[student_num // 2, student_num]"
    formula: 'make_expr(_sym[1][0], stu_s[_sym[0][0]].get(''age''), stu_s[_sym[0][1]].get(''age'')) '
    desc: "{_sym[0][0]}和{_sym[0][1]}年龄{'相同' if _sym[1][0] == 'eq' else '不同'}；"
queries:
  q1:
    desc: 最后，只有一位{'18' if query_age else '17'}岁的{'男生' if query_gender else '女生'}得到推荐资格。据此，可以推出获得推荐资格的是：
    ans_formula: to_unique([[p for p in students if get_value(_model, stu_s[p].get('gender'))
      == query_gender and get_value(_model, stu_s[p].get('age')) == query_age][0]
      for _model in _solutions])
    ans_text: _ans[0]
    ans_assertion: len(_ans) == 1
desc: N中学在进行高考免试学生的推荐时，共有{'、'.join(students)}等{student_num}位同学入围。在{student_num}人中，有{student_num
  - male_num}位同学是女生，{male_num}位同学是男生；有{old_num}位同学年龄为18岁，而另{student_num - old_num}位同学年龄则为17岁。已知，{conditions}
  {queries}
